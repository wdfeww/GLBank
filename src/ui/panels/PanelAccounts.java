/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui.panels;

import glbank.Account;
import glbank.Card;
import glbank.Transaction;
import glbank.database.ConnectionProvider;
import java.sql.SQLException;
import java.util.List;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;


/**
 *
 * @author Client
 */
public class PanelAccounts extends javax.swing.JPanel  {

    private int idc;
    int index;
    private List<Account> list;
    private List<Card> cards;
    Transaction trans;
    private int idemp;
    private int indexCard;

  
    public PanelAccounts(int idc, int idemp) throws ClassNotFoundException, InstantiationException, IllegalAccessException, SQLException {
        this.idc = idc;
        this.idemp=idemp;
        initComponents();
        initAcountList();
        lblBalanceAmount.setText("");
        btnCreateCard.setVisible(false);
        lblStatus1.setVisible(false);
        lblStatus.setVisible(false);
        lblPin.setVisible(false);
        lblPin1.setVisible(false);
        btnBlock.setVisible(false);
        txtChangePin.setVisible(false);
        btnChangePin.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        lblBalanceAmount = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        comboCards = new javax.swing.JComboBox<>();
        btnCreateCard = new javax.swing.JToggleButton();
        lblStatus1 = new javax.swing.JLabel();
        lblStatus = new javax.swing.JLabel();
        lblPin1 = new javax.swing.JLabel();
        lblPin = new javax.swing.JLabel();
        btnBlock = new javax.swing.JButton();
        txtChangePin = new javax.swing.JTextField();
        btnChangePin = new javax.swing.JButton();

        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Account id:");

        jLabel2.setText("Balance:");

        lblBalanceAmount.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        lblBalanceAmount.setText("BalanceAmount");

        jTextField1.setText("0");
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jTextField2.setText("0");

        jButton1.setText("Add +");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Sub -");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel3.setText("Cash transaction:");

        jButton3.setText("Add new account");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel5.setText("Card number:");

        comboCards.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboCardsActionPerformed(evt);
            }
        });

        btnCreateCard.setText("Create card on this account");
        btnCreateCard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateCardActionPerformed(evt);
            }
        });

        lblStatus1.setText("Status:");

        lblStatus.setText("blocked");

        lblPin1.setText("Pin:");

        lblPin.setText("0215");

        btnBlock.setText("Block");
        btnBlock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBlockActionPerformed(evt);
            }
        });

        btnChangePin.setText("Change pin");
        btnChangePin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChangePinActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel2))
                                .addGap(32, 32, 32)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblBalanceAmount)
                                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(18, 18, 18)
                                .addComponent(comboCards, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 212, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(45, 45, 45)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(62, 62, 62)
                                .addComponent(jLabel3))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton3)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(55, 55, 55)
                                .addComponent(txtChangePin, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnChangePin))
                            .addComponent(btnCreateCard)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblStatus1)
                                    .addComponent(lblPin1))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblPin)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblStatus)
                                        .addGap(18, 18, 18)
                                        .addComponent(btnBlock)))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(35, 35, 35)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(lblBalanceAmount)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1)
                            .addComponent(jButton2))))
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(comboCards, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btnCreateCard)
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblStatus1)
                    .addComponent(lblStatus)
                    .addComponent(btnBlock))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPin1)
                    .addComponent(lblPin))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtChangePin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnChangePin))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addComponent(jButton3)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        index = jComboBox1.getSelectedIndex();
        if(index == 0){
            btnBlock.setVisible(false);
            lblStatus1.setVisible(false);
            lblStatus.setVisible(false);
            lblPin.setVisible(false);
            lblPin1.setVisible(false);
            txtChangePin.setVisible(false);
        btnChangePin.setVisible(false);
        btnCreateCard.setVisible(false);
        }
        if (index > 0) {
            btnBlock.setVisible(false);
            try {
                lblBalanceAmount.setText(new ConnectionProvider().getBalance(list.get(index - 1).getIdacc()) + " EUR");
                
                 cards = new ConnectionProvider().getCards(list.get(index - 1).getIdacc());
                
                     
        if (cards.isEmpty()||index == 0) {
            comboCards.removeAllItems();
            comboCards.addItem("No cards in this account");
            btnCreateCard.setVisible(true);
            
           
        } else {
             btnCreateCard.setVisible(true);
            comboCards.removeAllItems();
            comboCards.addItem("Choose:");
            if (cards != null && cards.size() > 0) {
                for (Card card : cards) {
                    String item = "" + card.getCardnumber();
                    comboCards.addItem(item);
                }
            }
        }
                
                
               
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(PanelAccounts.class.getName()).log(Level.SEVERE, null, ex);
            } catch (InstantiationException ex) {
                Logger.getLogger(PanelAccounts.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IllegalAccessException ex) {
                Logger.getLogger(PanelAccounts.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(PanelAccounts.class.getName()).log(Level.SEVERE, null, ex);
            }

        } else {
            lblBalanceAmount.setText("");
        }
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
          
        try {
            ConnectionProvider connection = new ConnectionProvider();
            Account account = new Account(generateAcc(), idc, 0);
            if (!connection.existsAccount(account)) {
                connection.addNewAccount(account);
                initAcountList();
              /*  AddAccountBox aab = new AddAccountBox((JFrame) this.getRootPane().getParent(),true);
                 aab.setLocationRelativeTo(null);
                 aab.setVisible(true);*/
              JOptionPane.showMessageDialog(null, "Account '"+String.valueOf(account.getIdacc())+"/2701"+"' was successfully created!" , "Creating account " , JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (ClassNotFoundException ex) {
            
            Logger.getLogger(PanelAccounts.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            
            Logger.getLogger(PanelAccounts.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            
            Logger.getLogger(PanelAccounts.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
           
            Logger.getLogger(PanelAccounts.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_jButton3ActionPerformed

      private long generateCard() throws ClassNotFoundException, InstantiationException, IllegalAccessException, SQLException {
        String generatedCard = "";
        long cardnumber;
        
            for (int i = 0; i < 16; i++) {
                Random ran = new Random();
                int x = ran.nextInt(9) + 1;
                generatedCard += x;
            }
            cardnumber = Long.parseLong(generatedCard);
            if(new ConnectionProvider().existsCard(cardnumber)){
              return generateCard();
            }
            else{
            return cardnumber;
            }
    }
      
    private int generatePin() {
        int pin;
        
            String generatedPin = "";
        
            for (int i = 0; i < 4; i++) {
                Random ran = new Random();
                int x = ran.nextInt(9) + 1;
                generatedPin += x;
            }
            pin = Integer.parseInt(generatedPin);
       
      
        return pin;
    }
    
    private long generateAcc() {
        String generatedIdacc = "";
        long idacc;
        do {
            for (int i = 0; i < 10; i++) {
                Random ran = new Random();
                int x = ran.nextInt(9) + 1;
                generatedIdacc += x;
            }
            idacc = Long.parseLong(generatedIdacc);
        } while (idacc % 11 == 0);
        return idacc;
    }

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        try {
            if (index > 0) {
                float number = Float.parseFloat(jTextField1.getText());
                    if(number>0.1){
                (list.get(index - 1)).setBalance((list.get(index - 1).getBalance()) + number);
                jTextField1.setText("0");
                new ConnectionProvider().updateCashTransactions(list.get(index - 1), idemp, '+', number);

                lblBalanceAmount.setText("" + list.get(index - 1).getBalance() + " EUR");
                JOptionPane.showMessageDialog(null, number+" EUR was added to "+list.get(index - 1).getIdacc()+"/2701" , "" , JOptionPane.INFORMATION_MESSAGE);
            }else
                        JOptionPane.showMessageDialog(null, " must by greater than 0.10 EUR" , "" , JOptionPane.INFORMATION_MESSAGE);
                    }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(PanelAccounts.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(PanelAccounts.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(PanelAccounts.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(PanelAccounts.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NumberFormatException ex) {
            System.out.println("Error: " + ex.toString());
            jTextField1.setText("0");
            JOptionPane.showMessageDialog(null, "Input is not number!" , "" , JOptionPane.INFORMATION_MESSAGE);
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        try {
            if (index > 0) {
                float number = Float.parseFloat(jTextField2.getText());
                    if(number>0.1){
                        if(new ConnectionProvider().getBalance((list.get(index - 1).getIdacc()))>=number){
                (list.get(index - 1)).setBalance((list.get(index - 1).getBalance()) - number);
                jTextField2.setText("0");
                new ConnectionProvider().updateCashTransactions(list.get(index - 1), idemp, '-', number);
                
                lblBalanceAmount.setText("" + list.get(index - 1).getBalance() + " EUR");
                JOptionPane.showMessageDialog(null, number+"EUR was deducted from "+list.get(index - 1).getIdacc()+"/2701" , "" , JOptionPane.INFORMATION_MESSAGE);
                        }else{JOptionPane.showMessageDialog(null, " Lack of money in the account!" , "" , JOptionPane.INFORMATION_MESSAGE);}
                    }else
                        JOptionPane.showMessageDialog(null, " must by greater than 0.10 EUR" , "" , JOptionPane.INFORMATION_MESSAGE);
                        
                        }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(PanelAccounts.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(PanelAccounts.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(PanelAccounts.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(PanelAccounts.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NumberFormatException ex) {
            System.out.println("Error: " + ex.toString());
            jTextField2.setText("0");
            JOptionPane.showMessageDialog(null, "Input is not number!" , "" , JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void btnCreateCardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateCardActionPerformed
        try {
            int npin = generatePin();
            long ncard = generateCard();
            new ConnectionProvider().createCard(new Card(0,ncard,list.get(index - 1).getIdacc(),false,npin));
            btnCreateCard.setVisible(false);
            JOptionPane.showMessageDialog(null, " Card: "+ncard+" was created! Pin: "+npin , "" , JOptionPane.INFORMATION_MESSAGE);
            initAcountList();
        } catch (ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(null, " Error! Card was not created! " , "" , JOptionPane.INFORMATION_MESSAGE);
            Logger.getLogger(PanelAccounts.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            JOptionPane.showMessageDialog(null, " Error! Card was not created! " , "" , JOptionPane.INFORMATION_MESSAGE);
            Logger.getLogger(PanelAccounts.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            JOptionPane.showMessageDialog(null, " Error! Card was not created! " , "" , JOptionPane.INFORMATION_MESSAGE);
            Logger.getLogger(PanelAccounts.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, " Error! Card was not created! " , "" , JOptionPane.INFORMATION_MESSAGE);
            Logger.getLogger(PanelAccounts.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_btnCreateCardActionPerformed

    private void comboCardsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboCardsActionPerformed
            indexCard = comboCards.getSelectedIndex(); 
                    lblStatus1.setVisible(false);
                    lblStatus.setVisible(false);
                    lblPin.setVisible(false);
                    lblPin1.setVisible(false);
                 txtChangePin.setVisible(false);
                 txtChangePin.setText("");
        btnChangePin.setVisible(false);
                   
                  
                if(indexCard>0){
                    lblStatus1.setVisible(true);
                    lblStatus.setVisible(true);
                    lblPin.setVisible(true);
                    lblPin1.setVisible(true);
                    txtChangePin.setVisible(true);
                    txtChangePin.setText("");
                    btnChangePin.setVisible(true);
                    if(cards.get(indexCard - 1).isBlocked()){
                         lblStatus.setText("Blocked");
                    }else
                        lblStatus.setText("Not blocked");
                    lblPin.setText(""+cards.get(indexCard - 1).getPin());
                    
                      if(lblStatus.isVisible()&&lblStatus.getText()=="Not blocked"){
                          btnBlock.setVisible(true);
                          btnBlock.setText("Block");
                        
                        
                    }else{
                        btnBlock.setVisible(true);
                        btnBlock.setText("Unblock");
                      }
                 
            }
           
            
    }//GEN-LAST:event_comboCardsActionPerformed

    private void btnBlockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBlockActionPerformed
       
        
        if(btnBlock.getText()=="Block"){
        try {
            JOptionPane.showMessageDialog(null, " Card was blocked! " , "" , JOptionPane.INFORMATION_MESSAGE);
            new ConnectionProvider().blockCard(cards.get(indexCard - 1).getCardnumber());
            initAcountList();
        } catch (ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(null, " Error! Card was not blocked! " , "" , JOptionPane.INFORMATION_MESSAGE);
            Logger.getLogger(PanelAccounts.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            JOptionPane.showMessageDialog(null, " Error! Card was not blocked! " , "" , JOptionPane.INFORMATION_MESSAGE);
            Logger.getLogger(PanelAccounts.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            JOptionPane.showMessageDialog(null, " Error! Card was not blocked! " , "" , JOptionPane.INFORMATION_MESSAGE);
            Logger.getLogger(PanelAccounts.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, " Error! Card was not blocked! " , "" , JOptionPane.INFORMATION_MESSAGE);
            Logger.getLogger(PanelAccounts.class.getName()).log(Level.SEVERE, null, ex);
        }}
        else{
           try {
            JOptionPane.showMessageDialog(null, " Card was unblocked! " , "" , JOptionPane.INFORMATION_MESSAGE);
            new ConnectionProvider().unblockCard(cards.get(indexCard - 1).getCardnumber());
            initAcountList();
        } catch (ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(null, " Error! Card was not blocked! " , "" , JOptionPane.INFORMATION_MESSAGE);
            Logger.getLogger(PanelAccounts.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            JOptionPane.showMessageDialog(null, " Error! Card was not blocked! " , "" , JOptionPane.INFORMATION_MESSAGE);
            Logger.getLogger(PanelAccounts.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            JOptionPane.showMessageDialog(null, " Error! Card was not blocked! " , "" , JOptionPane.INFORMATION_MESSAGE);
            Logger.getLogger(PanelAccounts.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, " Error! Card was not blocked! " , "" , JOptionPane.INFORMATION_MESSAGE);
            Logger.getLogger(PanelAccounts.class.getName()).log(Level.SEVERE, null, ex);
        } 
        }
    }//GEN-LAST:event_btnBlockActionPerformed

    private void btnChangePinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChangePinActionPerformed
        int pin=0000; 
        try{
        pin = Integer.parseInt(txtChangePin.getText());
        }catch(Exception ex){
            JOptionPane.showMessageDialog(null, " Error! Pin must be number! " , "" , JOptionPane.INFORMATION_MESSAGE);
            System.out.println("Error: 'parsing pin to number' "+ex);
        }
        if(txtChangePin.getText().length()!=4){
            JOptionPane.showMessageDialog(null, " Error! Pin must contain of 4 numbers! " , "" , JOptionPane.INFORMATION_MESSAGE);
        }else{
            try {
                new ConnectionProvider().changePin(cards.get(indexCard - 1).getCardnumber(), pin);
                JOptionPane.showMessageDialog(null, " Pin changed! " , "" , JOptionPane.INFORMATION_MESSAGE);
                initAcountList();
            } catch (ClassNotFoundException ex) {
                JOptionPane.showMessageDialog(null, "Error: Pin was not changed! " , "" , JOptionPane.INFORMATION_MESSAGE);
                Logger.getLogger(PanelAccounts.class.getName()).log(Level.SEVERE, null, ex);
            } catch (InstantiationException ex) {
                JOptionPane.showMessageDialog(null, "Error: Pin was not changed! " , "" , JOptionPane.INFORMATION_MESSAGE);
                Logger.getLogger(PanelAccounts.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IllegalAccessException ex) {
                JOptionPane.showMessageDialog(null, "Error: Pin was not changed! " , "" , JOptionPane.INFORMATION_MESSAGE);
                Logger.getLogger(PanelAccounts.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, "Error: Pin was not changed! " , "" , JOptionPane.INFORMATION_MESSAGE);
                Logger.getLogger(PanelAccounts.class.getName()).log(Level.SEVERE, null, ex);
            }
             
        }
        
        
    }//GEN-LAST:event_btnChangePinActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBlock;
    private javax.swing.JButton btnChangePin;
    private javax.swing.JToggleButton btnCreateCard;
    private javax.swing.JComboBox<String> comboCards;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JLabel lblBalanceAmount;
    private javax.swing.JLabel lblPin;
    private javax.swing.JLabel lblPin1;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblStatus1;
    private javax.swing.JTextField txtChangePin;
    // End of variables declaration//GEN-END:variables

    private void initAcountList() throws ClassNotFoundException, InstantiationException, IllegalAccessException, SQLException {
        btnCreateCard.setVisible(false);
        comboCards.removeAllItems();
        lblStatus1.setVisible(false);
        lblStatus.setVisible(false);
        lblPin.setVisible(false);
        lblPin1.setVisible(false);
        btnBlock.setVisible(false);
        txtChangePin.setText("");
        list = new ConnectionProvider().getAccounts(idc);
        if (list == null) {
            return;
        } else {
            jComboBox1.removeAllItems();
            jComboBox1.addItem("Choose:");
            if (list != null && list.size() > 0) {
                for (Account account : list) {
                    String item = "" + account.getIdacc();
                    jComboBox1.addItem(item + " / 2701");
                }
            }
        }
    }
    
   
}
